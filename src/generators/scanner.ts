import { Intent } from "../index"
import { listDir, readFile } from "../helpers"
const fs = require("fs")

const getAllIntents = (searchable: any, entityIds: string[]): string[] => {
    if (typeof searchable == "object") {
        Object.keys(searchable).forEach(key => {
            const obj = searchable[key]
            if (typeof obj == "object") {
                if ("examples" in obj && "entities" in obj) {
                    const newEntityIds = Object.keys((obj as Intent).entities)
                    entityIds = entityIds.concat(newEntityIds)
                }
            }
        })
    }
    return entityIds
}

async function run() {
    let entityIdentifiers: string[] = []

    const files = await listDir("src")
    
    for (const file of files) {
        if (file.includes(".ts") && file != "user.ts") {
            try {
                let imports = require(`${process.cwd()}/out/${file.replace(".ts", ".js")}`)
                entityIdentifiers = entityIdentifiers.concat(getAllIntents(imports, entityIdentifiers))
            } catch (err) {
                console.log(`Skipped file ${file} due to error. Error: ${err}`)
            }
        }
    }

    const sortedUniqueIdentifiers = [...new Set(entityIdentifiers)].sort()

    const staticIdentifiers = ["speech"]

    let existingFile
    try {
        existingFile = require(`${process.cwd()}/out/user.js`)
    } catch (err) {
        if (err) {
            console.log("Couldn't find user.js file")
        }
    }

    if (!existingFile || sortedUniqueIdentifiers.join() != Object.keys(existingFile).filter(key => !(key in staticIdentifiers)).sort().join()) {
        const allIdentifiers = sortedUniqueIdentifiers.concat(staticIdentifiers).map(id => `${id}: "_${id}",`).join("\n")
        const str = `/* This file is automatically generated by the "npm run watch" command. Do not edit! */ \nexport default { \n ${allIdentifiers} \n}`

        fs.writeFile(`src/user.ts`, str, (err: any) => {
            if (err) {
                console.log("Failed writing user.ts file. Err:", err)
            }
            process.exit()
        })
    } else {
        process.exit()
    }
}

run()